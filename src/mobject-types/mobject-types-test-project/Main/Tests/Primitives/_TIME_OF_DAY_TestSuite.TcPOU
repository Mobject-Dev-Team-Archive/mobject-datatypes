<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="_TIME_OF_DAY_TestSuite" Id="{4563c998-590c-070e-2f19-01a449edce69}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK _TIME_OF_DAY_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAddress();
TestClearReference();
TestClone();
TestIecTypeReturnsExpected();
TestMakeReferenceToFollowsReference();
TestMakeReferenceToUpdatesReference();
TestSize();
TestValueReturnsExpectedAfterInit();
TestValueReturnsExpectedAfterChange();
TestSerializeTypeWith();
TestSerializeWith();
TestTryDeserializeFrom();
TestTryMakeReferenceToFollowsReference();
TestTryMakeReferenceToUpdatesReference();
]]></ST>
    </Implementation>
    <Method Name="TestAddress" Id="{2e7f8198-9027-0c9c-1f18-b1852466b68e}">
      <Declaration><![CDATA[METHOD PUBLIC TestAddress
VAR
    _type : _TIME_OF_DAY(TIME_OF_DAY#0:0:0);
    notExpected : PVOID := 0;
    actual : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAddress');

actual := _type.Address;

AssertFalse(
    Condition := (notExpected = actual),
    Message := 'Type did not return a valid address.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClearReference" Id="{03fb6616-616a-0098-2207-02d5c2729890}">
      <Declaration><![CDATA[METHOD PUBLIC TestClearReference
VAR
    _type : _TIME_OF_DAY(TIME_OF_DAY#0:0:0);
	target : TIME_OF_DAY := TIME_OF_DAY#0:0:0;
    expected : TIME_OF_DAY := TIME_OF_DAY#0:0:0;
    actual : TIME_OF_DAY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClearReference');

_type.MakeReferenceTo(target);
_type.ClearReference();
target := TIME_OF_DAY#12:34:56.789;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClone" Id="{a0838834-76a8-0e8f-0048-4ef1a087fe81}">
      <Declaration><![CDATA[METHOD PUBLIC TestClone
VAR
    _type : _TIME_OF_DAY(TIME_OF_DAY#12:34:56.789);
	clone : I_Datatype;
	isValidClone : BOOL;
	compareResult : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClone');

clone := _type.Clone();

isValidClone := clone <> 0;

IF isValidClone THEN
	compareResult := memcmp(_type.Address, clone.Address, clone.Size);
END_IF

AssertTrue(
	Condition := isValidClone,
	Message := 'Clone did not produce a clone'
);

AssertEquals_DINT(
	Expected := 0,
    Actual := compareResult,
    Message := 'Clone did not return a valid clone.'
);

clone.Dispose();

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIecTypeReturnsExpected" Id="{b703dd3e-bff5-007c-13ae-41b8e1ad69c2}">
      <Declaration><![CDATA[METHOD PUBLIC TestIecTypeReturnsExpected
VAR
    _type : _TIME_OF_DAY(TIME_OF_DAY#0:0:0);
    expected : STRING := 'TIME_OF_DAY';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIecTypeReturnsExpected');

actual := _type.IecType;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToFollowsReference" Id="{710e939e-7f8b-00c4-0957-f298f87b3b38}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToFollowsReference
VAR
    _type : _TIME_OF_DAY(TIME_OF_DAY#0:0:0);
	target : TIME_OF_DAY := TIME_OF_DAY#0:0:0;
    expected : TIME_OF_DAY := TIME_OF_DAY#12:34:56.789;
    actual : TIME_OF_DAY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToFollowsReference');

_type.MakeReferenceTo(target);
target := TIME_OF_DAY#12:34:56.789;;

actual := _type.Value;

AssertEquals_TIME_OF_DAY(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToUpdatesReference" Id="{62f7759c-8761-0801-3a1e-80d0a3fc891b}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToUpdatesReference
VAR
    _type : _TIME_OF_DAY(TIME_OF_DAY#0:0:0);
	target : TIME_OF_DAY := TIME_OF_DAY#0:0:0;
    expected : TIME_OF_DAY := TIME_OF_DAY#12:34:56.789;
    actual : TIME_OF_DAY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToUpdatesReference');

_type.MakeReferenceTo(target);
_type.Value := TIME_OF_DAY#12:34:56.789;

actual := target;

AssertEquals_TIME_OF_DAY(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeTypeWith" Id="{00861f6b-aa3e-03ad-3322-d01d8e082206}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeTypeWith
VAR
    _type : _TIME_OF_DAY(TIME_OF_DAY#0:0:0);
    serializer : JsonSerializer;
    expected : STRING := '{"type":"TIME_OF_DAY"}';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeTypeWith');

serializer.Reset();
_type.SerializeTypeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeWith" Id="{a951e2b8-fc44-005f-0728-a5b898b6c73a}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeWith
VAR
    _type : _TIME_OF_DAY(TIME_OF_DAY#12:34:56.789);
    serializer : JsonSerializer;
    expected : STRING := 'TIME_OF_DAY#12:34:56.789';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeWith');

serializer.Reset();
_type.SerializeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type data did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSize" Id="{30ef9cd2-42e7-0553-1ae5-8369626bf930}">
      <Declaration><![CDATA[METHOD PUBLIC TestSize
VAR
    _type : _TIME_OF_DAY(TIME_OF_DAY#0:0:0);
    expected : UDINT := SIZEOF(TIME_OF_DAY);
    actual : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSize');

actual := _type.Size;

AssertEquals_UDINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct size.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryDeserializeFrom" Id="{82dbc93a-b3fc-07f6-06b0-5a5362f325bf}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryDeserializeFrom
VAR
    deserializer : JsonDeserializer;
    feedback : DeserializerFeedback;
    json : STRING := 'TIME_OF_DAY#12:34:56.789';
    _type : _TIME_OF_DAY(TIME_OF_DAY#0:0:0);
    expected : TIME_OF_DAY := TIME_OF_DAY#12:34:56.789;
    actual : TIME_OF_DAY;
 END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryDeserializeFrom');

deserializer.Reset();
deserializer.TryLoad(json);
_type.TryDeserializeFrom(Deserializer, Feedback);

actual := _type.Value;

AssertEquals_TIME_OF_DAY(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not deserialize correctly.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToFollowsReference"
      Id="{87aa8bb1-4171-0655-2b2c-bc1de90ca327}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToFollowsReference
VAR
    _type : _TIME_OF_DAY(TIME_OF_DAY#0:0:0);
	target : _TIME_OF_DAY(TIME_OF_DAY#0:0:0);
    expected : TIME_OF_DAY := TIME_OF_DAY#12:34:56.789;
    actual : TIME_OF_DAY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToFollowsReference');

_type.TryMakeReferenceTo(target);
target.Value := TIME_OF_DAY#12:34:56.789;

actual := _type.Value;

AssertEquals_TIME_OF_DAY(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToUpdatesReference"
      Id="{e91639c9-1648-0a77-1440-975ee3b7eb83}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToUpdatesReference
VAR
    _type : _TIME_OF_DAY(TIME_OF_DAY#0:0:0);
	target : _TIME_OF_DAY(TIME_OF_DAY#0:0:0);
    expected : TIME_OF_DAY := TIME_OF_DAY#12:34:56.789;
    actual : TIME_OF_DAY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToUpdatesReference');

_type.TryMakeReferenceTo(target);
_type.Value := TIME_OF_DAY#12:34:56.789;

actual := target.Value;

AssertEquals_TIME_OF_DAY(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterChange" Id="{3187fe4d-9842-01bc-04fa-51a752631234}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterChange
VAR
    _type : _TIME_OF_DAY(TIME_OF_DAY#0:0:0);
    expected : TIME_OF_DAY := TIME_OF_DAY#12:34:56.789;
    actual : TIME_OF_DAY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterChange');

_type.Value := TIME_OF_DAY#12:34:56.789;

actual := _type.Value;

AssertEquals_TIME_OF_DAY(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterInit" Id="{9a16ff7a-a6d0-05fc-36d7-381c0c7b3606}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterInit
VAR
    _type : _TIME_OF_DAY(TIME_OF_DAY#12:34:56.789);
    expected : TIME_OF_DAY := TIME_OF_DAY#12:34:56.789;
    actual : TIME_OF_DAY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterInit');

actual := _type.Value;

AssertEquals_TIME_OF_DAY(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after Init.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>