<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="_DT_TestSuite" Id="{069de2a4-8b7c-0fa1-0c43-de31d82e3ffa}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK _DT_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAddress();
TestClearReference();
TestClone();
TestIecTypeReturnsExpected();
TestMakeReferenceToFollowsReference();
TestMakeReferenceToUpdatesReference();
TestSize();
TestValueReturnsExpectedAfterInit();
TestValueReturnsExpectedAfterChange();
TestSerializeTypeWith();
TestSerializeWith();
TestTryDeserializeFrom();
TestTryMakeReferenceToFollowsReference();
TestTryMakeReferenceToUpdatesReference();
]]></ST>
    </Implementation>
    <Method Name="TestAddress" Id="{1cf57634-3e79-0fe8-1e1e-db55ce5a08ef}">
      <Declaration><![CDATA[METHOD PUBLIC TestAddress
VAR
    _type : _DT(DT#1970-1-1-0:0:0);
    notExpected : PVOID := 0;
    actual : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAddress');

actual := _type.Address;

AssertFalse(
    Condition := (notExpected = actual),
    Message := 'Type did not return a valid address.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClearReference" Id="{401a4af5-e52b-00ce-2135-4308b8db1ce4}">
      <Declaration><![CDATA[METHOD PUBLIC TestClearReference
VAR
    _type : _DT(DT#1970-1-1-0:0:0);
	target : DT := DT#1970-1-1-0:0:0;
    expected : DT := DT#1970-1-1-0:0:0;
    actual : DT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClearReference');

_type.MakeReferenceTo(target);
_type.ClearReference();
target := DT#2024-12-31-12:34:56;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClone" Id="{634bdbd9-37ae-06da-1aab-50a12d358b92}">
      <Declaration><![CDATA[METHOD PUBLIC TestClone
VAR
    _type : _DT(DT#2024-12-31-12:34:56);
	clone : I_Datatype;
	isValidClone : BOOL;
	compareResult : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClone');

clone := _type.Clone();

isValidClone := clone <> 0;

IF isValidClone THEN
	compareResult := memcmp(_type.Address, clone.Address, clone.Size);
END_IF

AssertTrue(
	Condition := isValidClone,
	Message := 'Clone did not produce a clone'
);

AssertEquals_DINT(
	Expected := 0,
    Actual := compareResult,
    Message := 'Clone did not return a valid clone.'
);

clone.Dispose();

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIecTypeReturnsExpected" Id="{5c879bd9-092b-04b5-364b-73837e8a376a}">
      <Declaration><![CDATA[METHOD PUBLIC TestIecTypeReturnsExpected
VAR
    _type : _DT(DT#2024-12-31-12:34:56);
    expected : STRING := 'DT';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIecTypeReturnsExpected');

actual := _type.Datatype;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToFollowsReference" Id="{dedd64a5-32f2-0d47-02de-8e813503b155}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToFollowsReference
VAR
    _type : _DT(DT#1970-1-1-0:0:0);
	target : DT := DT#1970-1-1-0:0:0;
    expected : DT := DT#2024-12-31-12:34:56;
    actual : DT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToFollowsReference');

_type.MakeReferenceTo(target);
target := DT#2024-12-31-12:34:56;

actual := _type.Value;

AssertEquals_DATE_AND_TIME(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToUpdatesReference" Id="{4f74756b-3123-0880-21be-1fe2760ecd91}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToUpdatesReference
VAR
    _type : _DT(DT#1970-1-1-0:0:0);
	target : DT := DT#1970-1-1-0:0:0;
    expected : DT := DT#2024-12-31-12:34:56;
    actual : DT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToUpdatesReference');

_type.MakeReferenceTo(target);
_type.Value := DT#2024-12-31-12:34:56;

actual := target;

AssertEquals_DATE_AND_TIME(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeTypeWith" Id="{431adc3f-5a28-0316-0748-76c169c85913}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeTypeWith
VAR
    _type : _DT(DT#2024-12-31-12:34:56);
    serializer : JsonSerializer;
    expected : STRING := '{"datatype":"DT"}';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeTypeWith');

serializer.Reset();
_type.SerializeTypeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeWith" Id="{1af3e97a-655f-023c-186e-193b5670a702}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeWith
VAR
    _type : _DT(DT#2024-12-31-12:34:56);
    serializer : JsonSerializer;
    expected : STRING := '"2024-12-31T12:34:56"';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeWith');

serializer.Reset();
_type.SerializeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type data did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSize" Id="{5831f488-2ee9-091b-2d91-b2b78416d26c}">
      <Declaration><![CDATA[METHOD PUBLIC TestSize
VAR
    _type : _DT(DT#1970-1-1-0:0:0);
    expected : UDINT := SIZEOF(DT);
    actual : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSize');

actual := _type.Size;

AssertEquals_UDINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct size.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryDeserializeFrom" Id="{2505a1bd-db08-0299-2a4d-2e2fb9dabf70}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryDeserializeFrom
VAR
    deserializer : JsonDeserializer;
    feedback : DeserializerFeedback;
    json : STRING := '"2024-12-31T12:34:56"';
    _type : _DT(DT#1970-1-1-0:0:0);
    expected : DT := DT#2024-12-31-12:34:56;
    actual : DT;
 END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryDeserializeFrom');

deserializer.Reset();
deserializer.TryLoad(json);
_type.TryDeserializeFrom(Deserializer, Feedback);

actual := _type.Value;

AssertEquals_DATE_AND_TIME(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not deserialize correctly.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToFollowsReference" Id="{e2f7c0b4-c1a0-0c4a-026e-680bc3ea2b70}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToFollowsReference
VAR
    _type : _DT(DT#1970-1-1-0:0:0);
	target : _DT(DT#1970-1-1-0:0:0);
    expected : DT := DT#2024-12-31-12:34:56;
    actual : DT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToFollowsReference');

_type.TryMakeReferenceTo(target);
target.Value := DT#2024-12-31-12:34:56;

actual := _type.Value;

AssertEquals_DATE_AND_TIME(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToUpdatesReference" Id="{b3914643-8925-0c00-2e64-b37dd2b77ab0}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToUpdatesReference
VAR
    _type : _DT(DT#1970-1-1-0:0:0);
	target : _DT(DT#1970-1-1-0:0:0);
    expected : DT := DT#2024-12-31-12:34:56;
    actual : DT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToUpdatesReference');

_type.TryMakeReferenceTo(target);
_type.Value := DT#2024-12-31-12:34:56;

actual := target.Value;

AssertEquals_DATE_AND_TIME(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterChange" Id="{c6fa4bd7-7612-0ef0-24d1-7523af3c5b8e}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterChange
VAR
    _type : _DT(DT#1970-1-1-0:0:0);
    expected : DT := DT#2024-12-31-12:34:56;
    actual : DT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterChange');

_type.Value := DT#2024-12-31-12:34:56;

actual := _type.Value;

AssertEquals_DATE_AND_TIME(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterInit" Id="{21a7ed7a-f4b8-01b9-1ed1-4dadfae68f8b}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterInit
VAR
    _type : _DT(DT#2024-12-31-12:34:56);
    expected : DT := DT#2024-12-31-12:34:56;
    actual : DT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterInit');

actual := _type.Value;

AssertEquals_DATE_AND_TIME(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after Init.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>