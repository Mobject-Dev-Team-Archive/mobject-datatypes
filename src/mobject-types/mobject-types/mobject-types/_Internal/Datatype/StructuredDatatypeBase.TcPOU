<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="StructuredDatatypeBase" Id="{d625e009-5f55-02c3-36d6-363c53933949}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK ABSTRACT StructuredDatatypeBase EXTENDS UserDefinedDatatypeBase IMPLEMENTS I_StructuredDatatype
VAR
	membersHost : MembersHost;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Protected" Id="{7be81008-5185-0ecf-2c87-21a945dccc6c}" />
    <Method Name="Accept" Id="{06765757-4f9c-06e9-3ba8-c4dbd62f08c0}">
      <Declaration><![CDATA[METHOD PUBLIC Accept
VAR_INPUT
	Visitor : I_DatatypeVisitor;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Visitor.VisitDatatype(THIS^);
membersHost.Accept(Visitor);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddMember" Id="{000f5fe3-c73b-0a5c-3784-f4147181b91f}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED AddMember
VAR_INPUT
	MemberName : T_MAXSTRING;
	Member : I_Datatype;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[membersHost.AddMember(MemberName, Member);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Datatype" Id="{a8c18764-bb60-0e02-27e9-99f1e4f4ba10}">
      <Declaration><![CDATA[PROPERTY PUBLIC Datatype : T_MAXSTRING]]></Declaration>
      <Get Name="Get" Id="{bc004734-b432-0c60-2e2e-c258a8f38112}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Datatype := 'STRUCT';]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="GetMemberEnumerator" Id="{fac9ada8-4cb2-073e-22b0-6df830bd06b4}">
      <Declaration><![CDATA[METHOD PUBLIC GetMemberEnumerator : I_KeyValueForwardEnumerator
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetMemberEnumerator := membersHost.GetMemberEnumerator();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnSerializeTypeWith" Id="{6aff2491-e883-0d45-3087-d47a6efdc632}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED OnSerializeTypeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.OnSerializeTypeWith(Serializer);
membersHost.SerializeTypeWith(Serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeWith" Id="{f673cce2-1a3e-44bc-81da-e8bc2c037902}">
      <Declaration><![CDATA[METHOD PUBLIC SerializeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Serializer.StartObject();
membersHost.SerializeWith(Serializer);
Serializer.EndObject();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryCopy" Id="{2a52ab7e-c04c-4dca-9c5a-bd85f10678c4}">
      <Declaration><![CDATA[METHOD PUBLIC TryCopy : BOOL
VAR_INPUT
	Source : I_Datatype;
END_VAR
VAR
	SourceAsStructure : I_StructuredDatatype;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Source.TryResolveAsStructuredType(SourceAsStructure) THEN
	RETURN;
END_IF

IF SourceAsStructure.Identifier <> Identifier THEN
	RETURN;
END_IF

memcpy(Address, Source.Address, Size);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryDeserializeFrom" Id="{59671805-cc69-411a-a0b1-4ff94095acb6}">
      <Declaration><![CDATA[METHOD TryDeserializeFrom : BOOL
VAR_INPUT
	Deserializer : I_Deserializer;
	Feedback : I_DeserializerFeedback;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryDeserializeFrom := membersHost.TryDeserializeFrom(Deserializer, Feedback);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetMemberByName" Id="{8f166c4e-7a97-0c21-3753-3c2e46dcf112}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetMemberByName : BOOL
VAR_INPUT
	Name : T_MAXSTRING;
	Destination : REFERENCE TO I_Datatype;
END_VAR
VAR
	member : I_Datatype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT membersHost.TryGetMemberByName(Name, member) THEN 
	RETURN;
END_IF

Destination := member;
TryGetMemberByName := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryResolveAsStructuredType" Id="{4cf287f6-cc3a-0aaf-0d50-e2dcf54e34fd}">
      <Declaration><![CDATA[METHOD PUBLIC TryResolveAsStructuredType : BOOL
VAR_INPUT
	Destination : REFERENCE TO I_StructuredDatatype;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Destination := THIS^;
TryResolveAsStructuredType := TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>