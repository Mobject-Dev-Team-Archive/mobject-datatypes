<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="EnumDatatypeBase" Id="{b7a95de7-b421-0e8f-2327-fed6e5aa41c9}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK ABSTRACT EnumDatatypeBase EXTENDS UserDefinedDatatypeBase IMPLEMENTS I_EnumDatatype
VAR
	_baseType : I_Datatype;
	enumerations : Dictionary;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Private" Id="{abe5b4bb-f5fe-0010-0885-5bc659c7d995}" />
    <Folder Name="Protected" Id="{df80dcfd-7e83-0e16-3e74-a8452c92beda}" />
    <Method Name="AddBaseType" Id="{5697f491-86c4-02ef-188a-e14d3091e797}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED AddBaseType
VAR_INPUT
	BaseType : I_Datatype;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_baseType := BaseType;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddEnumeration" Id="{6ce4bf04-6cb4-0cfb-3763-a52d39a150e4}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED AddEnumeration
VAR_INPUT
	Enumeration : T_MAXSTRING;
	Value : ANY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[enumerations.AddOrUpdate(Enumeration, Value);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateEnumError" Id="{e4129c80-b976-0890-3706-5b891a6f721e}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CreateEnumError : I_Error
VAR_INPUT
	Enum : T_MAXSTRING;
END_VAR
VAR
	pError : POINTER TO UnknownEnumerationError;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pError := __NEW(UnknownEnumerationError(EnumString := Enum));
CreateEnumError := pError^;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Datatype" Id="{526e7ac1-93e0-0467-3a70-e27a408f2f7c}">
      <Declaration><![CDATA[PROPERTY PUBLIC Datatype : T_MAXSTRING]]></Declaration>
      <Get Name="Get" Id="{3eed1a3c-d9b3-0f10-1751-427e0097a390}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Datatype := 'ENUM';]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="IsEnumeratorValueEqual" Id="{f88c9827-7762-0230-3ec6-56ecb680df4b}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD ABSTRACT IsEnumeratorValueEqual : BOOL
VAR_INPUT
	Enumerator : I_KeyValueForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnSerializeTypeWith" Id="{3864821e-09dc-0d14-2436-07a6354a045b}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED OnSerializeTypeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.OnSerializeTypeWith(Serializer);
SerializeEnums(Serializer);
SerializeBaseType(Serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeBaseType" Id="{f93acaf6-72b8-0a12-374c-417568457829}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE SerializeBaseType
VAR_INPUT
	Serializer : I_Serializer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _baseType = 0 THEN
	RETURN;
END_IF

Serializer.AddKey('baseType');
_baseType.SerializeTypeWith(Serializer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeEnums" Id="{2167f6be-7212-014b-0780-288bef4900ce}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE SerializeEnums
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	enumerator : I_KeyValueForwardEnumerator;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Serializer.AddKey('enumerations');
Serializer.StartArray();

enumerator := enumerations.GetKeyValueEnumerator();

WHILE enumerator.MoveNext() DO
	Serializer.AddString(enumerator.Key);
END_WHILE

enumerator.Dispose();

Serializer.EndArray();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeWith" Id="{ddbc34c4-cbd6-0ef0-22ff-c527be90a527}">
      <Declaration><![CDATA[METHOD PUBLIC SerializeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	returnKey : T_MAXSTRING;
	enumerator : I_KeyValueForwardEnumerator;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[enumerator := enumerations.GetKeyValueEnumerator();
returnKey := 'UNDEFINED';

WHILE (enumerator.MoveNext()) DO
	
	IF IsEnumeratorValueEqual(enumerator) THEN
		returnKey := enumerator.key;
		EXIT;
	END_IF

END_WHILE

Serializer.AddString(returnKey);
enumerator.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryDeserializeFrom" Id="{d8fbce8c-ee8b-052e-1578-7e5cd0c5b33a}">
      <Declaration><![CDATA[METHOD TryDeserializeFrom : BOOL
VAR_INPUT
	Deserializer : I_Deserializer;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	key : T_MAXSTRING;
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Deserializer.TryGetString(key, Feedback) THEN
	RETURN;
END_IF

IF NOT enumerations.TryGetValueTo(key, Address, Size) THEN
	error := CreateEnumError(key);
	Feedback.LogError(error);
	RETURN;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryResolveAsEnumType" Id="{7fff9ffe-4f82-0d07-1232-c7244381b275}">
      <Declaration><![CDATA[METHOD PUBLIC TryResolveAsEnumType : BOOL
VAR_INPUT
	Destination : REFERENCE TO I_EnumDatatype;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Destination := THIS^;
TryResolveAsEnumType := TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>