<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="_FLOAT" Id="{e544e036-9c3a-0a61-3910-dde23db4424d}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK _FLOAT EXTENDS AliasDatatypeBase
VAR
	localData : FLOAT;
	activeData : REFERENCE TO FLOAT REF= localData;
	aliasBaseType : _LREAL(localData);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{8c9565a5-0beb-0708-11b9-437c7905f40f}" />
    <Folder Name="Protected" Id="{89712a52-18ae-07b8-3966-fea83bf3efd8}" />
    <Property Name="Address" Id="{78bf8f79-e163-0fd5-39ad-6ee17491b8ab}">
      <Declaration><![CDATA[PROPERTY PUBLIC Address : PVOID]]></Declaration>
      <Get Name="Get" Id="{b4d73089-202a-0273-0cf1-5ca22886a16e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Address := ADR(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ClearReference" Id="{7ff94cd1-223a-0f69-0142-804d3b7d702e}">
      <Declaration><![CDATA[METHOD PUBLIC ClearReference
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= localData;
SetBaseTypeReference();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clone" Id="{80e0ab70-36a0-0025-1259-7c61c0c1d70a}">
      <Declaration><![CDATA[METHOD PUBLIC Clone : I_Datatype
VAR
    pClone : POINTER TO _FLOAT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[pClone := __NEW(_FLOAT(InitialValue := Value));
Clone := pClone^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{be4b5ada-bdcb-07bb-1be4-38c060ad099b}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	InitialValue : FLOAT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[localData := InitialValue;
SetBaseTypeReference();
AddBaseType(aliasBaseType);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Identifier" Id="{f104ef4a-6158-01ae-0dab-342a586715c3}">
      <Declaration><![CDATA[PROPERTY PUBLIC Identifier : T_MAXSTRING]]></Declaration>
      <Get Name="Get" Id="{45ee9c3d-5b78-0d3b-0f19-9712248ecc92}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Identifier := 'FLOAT';]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="MakeReferenceTo" Id="{07b05c37-a2e3-05b9-0eef-db713695e8b2}">
      <Declaration><![CDATA[METHOD PUBLIC MakeReferenceTo
VAR_INPUT
	ReferenceTarget : REFERENCE TO FLOAT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= ReferenceTarget;
SetBaseTypeReference();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetBaseTypeReference" Id="{841b5ad7-ce87-08eb-1d96-dac4d62db896}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED SetBaseTypeReference
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[aliasBaseType.MakeReferenceTo(activeData);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{f340fa22-61d4-09f1-3c07-c59f10ec7f1f}">
      <Declaration><![CDATA[PROPERTY PUBLIC Size : UDINT]]></Declaration>
      <Get Name="Get" Id="{c57484b6-63dc-06b7-2e00-11f44e37a19b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := SIZEOF(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="TryMakeReferenceTo" Id="{c1df8b2c-bcae-024b-3fa1-2aa3bb02b580}">
      <Declaration><![CDATA[METHOD TryMakeReferenceTo : BOOL
VAR_INPUT
	Target : I_Datatype;
END_VAR
VAR
	targetAsAlias : I_AliasDatatype;
	pTargetData : POINTER TO FLOAT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Target.TryResolveAsAliasType(targetAsAlias) THEN
	RETURN;
END_IF

IF targetAsAlias.Identifier <> Identifier THEN
	RETURN;
END_IF

pTargetData := Target.Address;
activeData REF= pTargetData^;
SetBaseTypeReference();
TryMakeReferenceTo := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Value" Id="{657e324f-08a8-01cd-3aae-f90fbe8b24be}">
      <Declaration><![CDATA[PROPERTY PUBLIC Value : FLOAT]]></Declaration>
      <Get Name="Get" Id="{749b3910-41db-0ef2-0bfa-518471ca9a45}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Value := activeData;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{7c81c33a-57a7-0b4d-05db-d1391735f373}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[activeData := Value;]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>