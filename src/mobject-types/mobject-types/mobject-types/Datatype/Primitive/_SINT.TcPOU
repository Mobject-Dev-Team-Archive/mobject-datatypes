<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="_SINT" Id="{63e171fa-a00a-01e6-2be5-267abd900597}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK _SINT EXTENDS IntegerDatatypeBase
VAR
	localData : SINT;
	activeData : REFERENCE TO SINT REF= localData;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{47f4d29a-43d0-03a1-13ca-dd14b1c7c51e}" />
    <Folder Name="Protected" Id="{1a79cd9d-992d-047a-22c2-82bc0d3a008b}" />
    <Property Name="Address" Id="{9791cbf7-b868-03b9-0602-fa438c0662a3}">
      <Declaration><![CDATA[PROPERTY PUBLIC Address : PVOID]]></Declaration>
      <Get Name="Get" Id="{05afff34-3f78-0219-08c4-5cf606369559}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Address := ADR(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ClearReference" Id="{0ee0dec8-402b-0a50-0108-8a719a9cd455}">
      <Declaration><![CDATA[METHOD PUBLIC ClearReference
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= localData;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clone" Id="{d54602a1-4ce0-0c2f-2229-e1e2c5065e9b}">
      <Declaration><![CDATA[METHOD PUBLIC Clone : I_Datatype
VAR
    pClone : POINTER TO _SINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[pClone := __NEW(_SINT(InitialValue := Value));
Clone := pClone^;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Datatype" Id="{6ddec637-949e-097d-3088-31c4dc70688d}">
      <Declaration><![CDATA[PROPERTY PUBLIC Datatype : T_MAXSTRING]]></Declaration>
      <Get Name="Get" Id="{183f2f01-44d1-02f1-32c4-770cb310d890}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Datatype := 'SINT';]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{8daaa383-0a7c-032b-3b8f-ee6d35797b8f}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	InitialValue : SINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[localData := InitialValue;]]></ST>
      </Implementation>
    </Method>
    <Property Name="IsSigned" Id="{60b70c52-cace-0749-333a-65c3d1135469}">
      <Declaration><![CDATA[PROPERTY PUBLIC IsSigned : BOOL]]></Declaration>
      <Get Name="Get" Id="{9597b2a7-524c-0d2d-220a-0b3e14370529}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsSigned := TRUE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="LowerBound" Id="{2c63fc1b-ca06-0122-19dc-2f8416138643}">
      <Declaration><![CDATA[PROPERTY PUBLIC LowerBound : SINT]]></Declaration>
      <Get Name="Get" Id="{c960e47b-f5f0-0907-1b7d-84b6d313a391}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[LowerBound := DatatypeLimits.SINT_LOWER_LIMIT;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="MakeReferenceTo" Id="{bb0a599c-cb5d-0fce-2dd9-ed273e1f6c8b}">
      <Declaration><![CDATA[METHOD PUBLIC MakeReferenceTo
VAR_INPUT
	ReferenceTarget : REFERENCE TO SINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= ReferenceTarget;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeLowerbound" Id="{0233e13c-6364-082f-06a3-13e202dd6e00}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED SerializeLowerbound
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Serializer.AddSint(Lowerbound);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeUpperbound" Id="{f4c74446-d549-02ab-1d4d-bad69ac0cd7a}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED SerializeUpperbound
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Serializer.AddSint(Upperbound);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeWith" Id="{af9a3f16-389e-0de7-0c47-39a628af0227}">
      <Declaration><![CDATA[METHOD PUBLIC SerializeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Serializer.AddSint(activeData);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{ab932130-909c-0109-3e51-462e921ffaae}">
      <Declaration><![CDATA[PROPERTY PUBLIC Size : UDINT]]></Declaration>
      <Get Name="Get" Id="{e5bf6a81-d67d-0700-1099-8eeb7958a696}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := SIZEOF(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="TryDeserializeFrom" Id="{0b9e13ad-35fa-0b81-2484-57009f387016}">
      <Declaration><![CDATA[METHOD TryDeserializeFrom : BOOL
VAR_INPUT
	Deserializer : I_Deserializer;
	Feedback : I_DeserializerFeedback;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryDeserializeFrom := Deserializer.TryGetSint(activeData, Feedback);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryMakeReferenceTo" Id="{34f707c1-d40d-0e30-2757-816c497c7bf5}">
      <Declaration><![CDATA[METHOD TryMakeReferenceTo : BOOL
VAR_INPUT
	Target : I_Datatype;
END_VAR
VAR
	pTargetData : POINTER TO SINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT (Target.Datatype = Datatype) THEN
	RETURN;
END_IF

pTargetData := Target.Address;
activeData REF= pTargetData^;
TryMakeReferenceTo := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="UpperBound" Id="{1c0329b0-016d-0770-37a6-afd5ebe9d8f2}">
      <Declaration><![CDATA[PROPERTY PUBLIC UpperBound : SINT]]></Declaration>
      <Get Name="Get" Id="{454cad71-d78a-04ae-0c0a-091d68536a00}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[UpperBound :=  DatatypeLimits.SINT_UPPER_LIMIT;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Value" Id="{e0c01759-d0cd-09db-2dbf-737a2185225e}">
      <Declaration><![CDATA[PROPERTY PUBLIC Value : SINT]]></Declaration>
      <Get Name="Get" Id="{a32c337f-2a8f-0e65-398a-0e8c09d0d429}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Value := activeData;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{043eacc4-d935-067a-33da-0cdaa8251f35}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[activeData := Value;]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>