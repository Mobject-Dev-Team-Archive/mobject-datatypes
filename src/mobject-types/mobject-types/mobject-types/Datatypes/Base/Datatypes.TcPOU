<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Datatypes" Id="{6c9601e9-cb69-03bb-11a8-f515550e2ea0}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Datatypes IMPLEMENTS I_Datatypes
VAR
	eventEmitter : EventEmitter;
	primitives : Dictionary;
	structures : Dictionary;
	alias : Dictionary;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Private" Id="{78c7fbc9-34a6-07fb-3bc4-4515a5ffd2f8}" />
    <Folder Name="Protected" Id="{62284699-e54c-4ace-9c90-cfc00ad6615f}" />
    <Method Name="Accept" Id="{fcfbce77-74fe-0e7f-175c-9294ec3c39b4}">
      <Declaration><![CDATA[METHOD PUBLIC Accept
VAR_INPUT
	Visitor : I_DatatypeVisitor;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AcceptPrimative(Visitor);
AcceptStructures(Visitor);
AcceptAlias(Visitor);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AcceptAlias" Id="{eebff695-065a-08a1-1e04-8c2f78db7db6}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE AcceptAlias
VAR_INPUT
	Visitor : I_DatatypeVisitor;
END_VAR
VAR
	enumerator : I_ForwardEnumerator;
	datatype : I_Datatype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[enumerator := alias.GetEnumerator();

WHILE (enumerator.MoveNext()) DO
	IF enumerator.TryGet(datatype) THEN
		datatype.Accept(Visitor);
	END_IF
END_WHILE

enumerator.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="AcceptPrimative" Id="{9bf55bbf-f32f-051d-0f13-603c59d90ff4}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE AcceptPrimative
VAR_INPUT
	Visitor : I_DatatypeVisitor;
END_VAR
VAR
	enumerator : I_ForwardEnumerator;
	datatype : I_Datatype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[enumerator := primitives.GetEnumerator();

WHILE (enumerator.MoveNext()) DO
	IF enumerator.TryGet(datatype) THEN
		datatype.Accept(Visitor);
	END_IF
END_WHILE

enumerator.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="AcceptStructures" Id="{0be83cdd-9f3d-006f-168a-32f0dcd2ea1b}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE AcceptStructures
VAR_INPUT
	Visitor : I_DatatypeVisitor;
END_VAR
VAR
	enumerator : I_ForwardEnumerator;
	datatype : I_Datatype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[enumerator := structures.GetEnumerator();

WHILE (enumerator.MoveNext()) DO	
	IF enumerator.TryGet(datatype) THEN
		datatype.Accept(Visitor);
	END_IF
END_WHILE

enumerator.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitOnAliasDatatypeAddedEvent" Id="{48f3f8c0-b856-06c2-1476-2275e86601d0}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED EmitOnAliasDatatypeAddedEvent
VAR_INPUT
	Datatype : I_AliasDatatype;
END_VAR
VAR
	pAliasDatatypeAddedEvent : POINTER TO AliasDatatypeAddedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pAliasDatatypeAddedEvent := __NEW(AliasDatatypeAddedEvent(Target := Datatype));
eventEmitter.Emit('OnDatatypeAdded',pAliasDatatypeAddedEvent^);
pAliasDatatypeAddedEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitOnDatatypeAddedEvent" Id="{f5aee9fa-149f-4d4a-941b-789f116d8acd}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED EmitOnDatatypeAddedEvent
VAR_INPUT
	Datatype : I_Datatype;
END_VAR
VAR
	pDatatypeAddedEvent : POINTER TO DatatypeAddedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pDatatypeAddedEvent := __NEW(DatatypeAddedEvent(Target := Datatype));
eventEmitter.Emit('OnDatatypeAdded',pDatatypeAddedEvent^);
pDatatypeAddedEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitOnStructuredDatatypeAddedEvent" Id="{a18a95cd-9dcd-064f-2299-b1fff04c15e6}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED EmitOnStructuredDatatypeAddedEvent
VAR_INPUT
	Datatype : I_StructuredDatatype;
END_VAR
VAR
	pStructuredDatatypeAddedEvent : POINTER TO StructuredDatatypeAddedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pStructuredDatatypeAddedEvent := __NEW(StructuredDatatypeAddedEvent(Target := Datatype));
eventEmitter.Emit('OnDatatypeAdded',pStructuredDatatypeAddedEvent^);
pStructuredDatatypeAddedEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetAliasByIdentifier" Id="{c51a72ba-8246-0912-0373-b9f426726bf5}">
      <Declaration><![CDATA[METHOD PUBLIC GetAliasByIdentifier : BOOL
VAR_INPUT
	Identifier : T_MAXSTRING;
	Destination : REFERENCE TO I_AliasDatatype;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetAliasByIdentifier := alias.TryGetValue(Identifier, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetPrimitiveByIecType" Id="{d7c1dc3c-b86e-070f-1acc-07d73621282f}">
      <Declaration><![CDATA[METHOD PUBLIC GetPrimitiveByIecType : BOOL
VAR_INPUT
	Identifier : T_MAXSTRING;
	Destination : REFERENCE TO I_AliasDatatype;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetPrimitiveByIecType := primitives.TryGetValue(Identifier, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetStructureByIdentifier" Id="{44d14eb2-6e6f-0c87-2cf3-368078e88ab2}">
      <Declaration><![CDATA[METHOD PUBLIC GetStructureByIdentifier : BOOL
VAR_INPUT
	Identifier : T_MAXSTRING;
	Destination : REFERENCE TO I_StructuredDatatype;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetStructureByIdentifier := structures.TryGetValue(Identifier, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OffEvent" Id="{be08ab23-08fb-430a-a77c-ca6a54a7087c}">
      <Declaration><![CDATA[METHOD PUBLIC OffEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OffEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnceEvent" Id="{4426e051-4462-487d-a90d-644adbd72798}">
      <Declaration><![CDATA[METHOD PUBLIC OnceEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnceEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnEvent" Id="{9f41dac2-39fa-4d7e-b411-26a1d65961d8}">
      <Declaration><![CDATA[METHOD PUBLIC OnEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RegisterDatatype" Id="{8eb94590-4376-0771-0495-507ce775abe7}">
      <Declaration><![CDATA[METHOD RegisterDatatype
VAR_INPUT
	Datatype : I_Datatype;
END_VAR
VAR
	datatypeAsStructure : I_StructuredDatatype;
	datatypeAsAlias : I_AliasDatatype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Datatype.TryResolveAsStructuredType(datatypeAsStructure) THEN
	structures.AddOrUpdate(datatypeAsStructure.Identifier, datatypeAsStructure);
	emitOnStructuredDatatypeAddedEvent(datatypeAsStructure);
	RETURN;
END_IF

IF Datatype.TryResolveAsAliasType(datatypeAsAlias) THEN
	alias.AddOrUpdate(datatypeAsAlias.Identifier, datatypeAsAlias);
	emitOnAliasDatatypeAddedEvent(datatypeAsAlias);
	RETURN;
END_IF

// add enumeration

// add arrays

primitives.AddOrUpdate(Datatype.Datatype, Datatype);
emitOnDatatypeAddedEvent(Datatype);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeAliasTypeWith" Id="{6d9005d4-2c94-0000-344a-c53fded1d5e3}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE SerializeAliasTypeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	enumerator : I_ForwardEnumerator;
	datatype : I_AliasDatatype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[enumerator := alias.GetEnumerator();

WHILE enumerator.MoveNext() DO
	IF enumerator.TryGet(datatype) THEN
		datatype.SerializeTypeWith(Serializer);
	END_IF
END_WHILE

enumerator.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializePrimitiveTypeWith" Id="{fe87a4d8-360d-05d5-0318-5f7f98007760}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE SerializePrimitiveTypeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	enumerator : I_ForwardEnumerator;
	datatype : I_Datatype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[enumerator := primitives.GetEnumerator();

WHILE enumerator.MoveNext() DO
	IF enumerator.TryGet(datatype) THEN
		datatype.SerializeTypeWith(Serializer);
	END_IF
END_WHILE

enumerator.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeStructuresTypeWith" Id="{7706e606-9daa-0b93-01d0-f079e5c509d2}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE SerializeStructuresTypeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	enumerator : I_ForwardEnumerator;
	datatype : I_StructuredDatatype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[enumerator := structures.GetEnumerator();

WHILE enumerator.MoveNext() DO
	IF enumerator.TryGet(datatype) THEN
		datatype.SerializeTypeWith(Serializer);
	END_IF
END_WHILE

enumerator.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeTypeWith" Id="{11dc85a9-60d6-087d-1a5a-82b29db26b01}">
      <Declaration><![CDATA[METHOD PUBLIC SerializeTypeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Serializer.StartObject();
Serializer.AddKey('datatypes');
Serializer.StartArray();
SerializePrimitiveTypeWith(Serializer);
SerializeStructuresTypeWith(Serializer);
SerializeAliasTypeWith(Serializer);
Serializer.EndArray();
Serializer.EndObject();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>