<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Datatypes" Id="{6c9601e9-cb69-03bb-11a8-f515550e2ea0}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK Datatypes IMPLEMENTS I_Datatypes
VAR
	primitives : Dictionary;
	structures : Dictionary;
	alias : Dictionary;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Private" Id="{78c7fbc9-34a6-07fb-3bc4-4515a5ffd2f8}" />
    <Method Name="GetAliasByIdentifier" Id="{c51a72ba-8246-0912-0373-b9f426726bf5}">
      <Declaration><![CDATA[METHOD PUBLIC GetAliasByIdentifier : BOOL
VAR_INPUT
	Identifier : T_MAXSTRING;
	Destination : REFERENCE TO I_AliasDatatype;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetAliasByIdentifier := alias.TryGetValue(Identifier, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetPrimitiveByIecType" Id="{d7c1dc3c-b86e-070f-1acc-07d73621282f}">
      <Declaration><![CDATA[METHOD PUBLIC GetPrimitiveByIecType : BOOL
VAR_INPUT
	Identifier : T_MAXSTRING;
	Destination : REFERENCE TO I_AliasDatatype;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetPrimitiveByIecType := primitives.TryGetValue(Identifier, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetStructureByIdentifier" Id="{44d14eb2-6e6f-0c87-2cf3-368078e88ab2}">
      <Declaration><![CDATA[METHOD PUBLIC GetStructureByIdentifier : BOOL
VAR_INPUT
	Identifier : T_MAXSTRING;
	Destination : REFERENCE TO I_StructuredDatatype;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetStructureByIdentifier := structures.TryGetValue(Identifier, Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RegisterDatatype" Id="{8eb94590-4376-0771-0495-507ce775abe7}">
      <Declaration><![CDATA[METHOD RegisterDatatype
VAR_INPUT
	Datatype : I_Datatype;
END_VAR
VAR
	datatypeAsStructure : I_StructuredDatatype;
	datatypeAsAlias : I_AliasDatatype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Datatype.TryResolveAsStructuredType(datatypeAsStructure) THEN
	structures.AddOrUpdate(datatypeAsStructure.Identifier, datatypeAsStructure);
	RETURN;
END_IF

IF Datatype.TryResolveAsAliasType(datatypeAsAlias) THEN
	alias.AddOrUpdate(datatypeAsAlias.Identifier, datatypeAsAlias);
	RETURN;
END_IF

// add enumeration

// add arrays

primitives.AddOrUpdate(Datatype.IecType, Datatype);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeAliasTypeWith" Id="{6d9005d4-2c94-0000-344a-c53fded1d5e3}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE SerializeAliasTypeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	enumerator : I_ForwardEnumerator;
	datatype : I_AliasDatatype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[enumerator := alias.GetEnumerator();

WHILE enumerator.MoveNext() DO
	IF enumerator.TryGet(datatype) THEN
		datatype.SerializeTypeWith(Serializer);
	END_IF
END_WHILE

enumerator.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializePrimitiveTypeWith" Id="{fe87a4d8-360d-05d5-0318-5f7f98007760}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE SerializePrimitiveTypeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	enumerator : I_ForwardEnumerator;
	datatype : I_Datatype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[enumerator := primitives.GetEnumerator();

WHILE enumerator.MoveNext() DO
	IF enumerator.TryGet(datatype) THEN
		datatype.SerializeTypeWith(Serializer);
	END_IF
END_WHILE

enumerator.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeStructuresTypeWith" Id="{7706e606-9daa-0b93-01d0-f079e5c509d2}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE SerializeStructuresTypeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	enumerator : I_ForwardEnumerator;
	datatype : I_StructuredDatatype;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[enumerator := structures.GetEnumerator();

WHILE enumerator.MoveNext() DO
	IF enumerator.TryGet(datatype) THEN
		datatype.SerializeTypeWith(Serializer);
	END_IF
END_WHILE

enumerator.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeTypeWith" Id="{11dc85a9-60d6-087d-1a5a-82b29db26b01}">
      <Declaration><![CDATA[METHOD PUBLIC SerializeTypeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Serializer.StartObject();
Serializer.AddKey('datatypes');
Serializer.StartArray();
SerializePrimitiveTypeWith(Serializer);
SerializeStructuresTypeWith(Serializer);
SerializeAliasTypeWith(Serializer);
Serializer.EndArray();
Serializer.EndObject();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>