<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="_FLOAT_TestSuite" Id="{894525d3-6f9d-05d1-25cf-48b097742630}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK _FLOAT_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAddress();
TestClearReference();
TestClone();
TestTypeNameReturnsExpected();
TestMakeReferenceToFollowsReference();
TestMakeReferenceToUpdatesReference();
TestSize();
TestValueReturnsExpectedAfterInit();
TestValueReturnsExpectedAfterChange();
TestSerializeTypeWith();
TestSerializeWith();
TestTryDeserializeFrom();
TestTryMakeReferenceToFollowsReference();
TestTryMakeReferenceToUpdatesReference();
]]></ST>
    </Implementation>
    <Method Name="TestAddress" Id="{0a997e01-804f-03ee-3608-64ffb0eb713c}">
      <Declaration><![CDATA[METHOD PUBLIC TestAddress
VAR
    _type : _FLOAT(0.0);
    notExpected : PVOID := 0;
    actual : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAddress');

actual := _type.Address;

AssertFalse(
    Condition := (notExpected = actual),
    Message := 'Type did not return a valid address.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClearReference" Id="{ed4f5b9b-1ef6-0dac-10be-7c563c1028d7}">
      <Declaration><![CDATA[METHOD PUBLIC TestClearReference
VAR
    _type : _FLOAT(0.0);
	target : FLOAT := 0.0;
    expected : FLOAT := 0.0;
    actual : FLOAT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClearReference');

_type.MakeReferenceTo(target);
_type.ClearReference();
target := 123.4;

actual := _type.Value;

AssertEquals_LREAL(
    Expected := expected,
    Actual := actual,
    Delta := LREAL#0.001,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClone" Id="{b7e763f1-048d-0c13-39b5-db8c349a2b85}">
      <Declaration><![CDATA[METHOD PUBLIC TestClone
VAR
    _type : _FLOAT(123.4);
	clone : I_Datatype;
	isValidClone : BOOL;
	compareResult : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClone');

clone := _type.Clone();

isValidClone := clone <> 0;

IF isValidClone THEN
	compareResult := memcmp(_type.Address, clone.Address, clone.Size);
END_IF

AssertTrue(
	Condition := isValidClone,
	Message := 'Clone did not produce a clone'
);

AssertEquals_DINT(
	Expected := 0,
    Actual := compareResult,
    Message := 'Clone did not return a valid clone.'
);

clone.Dispose();

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIdentifierReturnsExpected" Id="{21321cc9-37b6-0b45-0f59-7dd35efa5935}">
      <Declaration><![CDATA[METHOD PUBLIC TestIdentifierReturnsExpected
VAR
    _type : _FLOAT(0.0);
    expected : STRING := 'FLOAT';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIdentifierReturnsExpected');

actual := _type.Identifier;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToFollowsReference" Id="{78e0796b-e039-0ef6-2ae8-ba65691845a9}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToFollowsReference
VAR
    _type : _FLOAT(0.0);
	target : FLOAT := 0.0;
    expected : FLOAT := 123.4;
    actual : FLOAT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToFollowsReference');

_type.MakeReferenceTo(target);
target := 123.4;

actual := _type.Value;

AssertEquals_LREAL(
    Expected := expected,
    Actual := actual,
    Delta := LREAL#0.001,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToUpdatesReference" Id="{beb9a8e8-5a90-05f4-1fb2-c4db83d0ade4}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToUpdatesReference
VAR
    _type : _FLOAT(0.0);
	target : FLOAT := 0.0;
    expected : FLOAT := 123.4;
    actual : FLOAT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToUpdatesReference');

_type.MakeReferenceTo(target);
_type.Value := 123.4;

actual := target;

AssertEquals_LREAL(
    Expected := expected,
    Actual := actual,
    Delta := LREAL#0.001,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeTypeWith" Id="{9ab8f22d-cadd-02d0-0563-76a33c3ce4a6}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeTypeWith
VAR
    _type : _FLOAT(0.0);
    serializer : JsonSerializer;
    expected : STRING(500) := '{"name":"ALIAS","identifier":"FLOAT","baseDatatype":{"name":"LREAL"}}';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeTypeWith');

serializer.Reset();
_type.SerializeTypeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeWith" Id="{726fe003-a130-0b04-1664-dcde280098e1}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeWith
VAR
    _type : _FLOAT(123.4);
    serializer : JsonSerializer;
    expected : STRING := '123.4';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeWith');

serializer.Reset();
_type.SerializeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type data did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSize" Id="{6cdfbdb0-cd4b-0139-3011-337a456020b0}">
      <Declaration><![CDATA[METHOD PUBLIC TestSize
VAR
    _type : _FLOAT(0.0);
    expected : UDINT := SIZEOF(FLOAT);
    actual : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSize');

actual := _type.Size;

AssertEquals_UDINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct size.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryDeserializeFrom" Id="{17ce97e8-d2a1-0a59-0593-e299926989c3}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryDeserializeFrom
VAR
    deserializer : JsonDeserializer;
    feedback : DeserializerFeedback;
    json : STRING := '123.4';
    _type : _FLOAT(0.0);
    expected : FLOAT := 123.4;
    actual : FLOAT;
 END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryDeserializeFrom');

deserializer.Reset();
deserializer.TryLoad(json);
_type.TryDeserializeFrom(Deserializer, Feedback);

actual := _type.Value;

AssertEquals_LREAL(
    Expected := expected,
    Actual := actual,
    Delta := LREAL#0.001,
    Message := 'Type did not deserialize correctly.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToFollowsReference" Id="{c2484b02-86c5-0a12-37ba-401e7f16ad8f}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToFollowsReference
VAR
    _type : _FLOAT(0.0);
	target : _FLOAT(0.0);
    expected : FLOAT := 123.4;
    actual : FLOAT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToFollowsReference');

_type.TryMakeReferenceTo(target);
target.Value := 123.4;

actual := _type.Value;

AssertEquals_LREAL(
    Expected := expected,
    Actual := actual,
    Delta := LREAL#0.001,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToUpdatesReference" Id="{5dee4575-d017-022f-3950-1ce8402fbf2a}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToUpdatesReference
VAR
    _type : _FLOAT(0.0);
	target : _FLOAT(0.0);
    expected : FLOAT := 123.4;
    actual : FLOAT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToUpdatesReference');

_type.TryMakeReferenceTo(target);
_type.Value := 123.4;

actual := target.Value;

AssertEquals_LREAL(
    Expected := expected,
    Actual := actual,
    Delta := LREAL#0.001,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTypeNameReturnsExpected" Id="{eea146ef-46d1-025b-080a-da19ef8bc8b8}">
      <Declaration><![CDATA[METHOD PUBLIC TestTypeNameReturnsExpected
VAR
    _type : _FLOAT(0.0);
    expected : STRING := 'ALIAS';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTypeNameReturnsExpected');

actual := _type.TypeName;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterChange" Id="{5950a397-54ed-03e5-1512-2e3ed213c772}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterChange
VAR
    _type : _FLOAT(0.0);
    expected : FLOAT := 123.4;
    actual : FLOAT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterChange');

_type.Value := 123.4;

actual := _type.Value;

AssertEquals_LREAL(
    Expected := expected,
    Actual := actual,
    Delta := LREAL#0.001,
    Message := 'Expected value not returned after change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterInit" Id="{149980e7-4263-0719-3cd0-3a75f5e19a62}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterInit
VAR
    _type : _FLOAT(123.4);
    expected : FLOAT := 123.4;
    actual : FLOAT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterInit');

actual := _type.Value;

AssertEquals_LREAL(
    Expected := expected,
    Actual := actual,
    Delta := LREAL#0.001,
    Message := 'Expected value not returned after Init.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>