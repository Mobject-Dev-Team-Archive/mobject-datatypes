<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="_REAL_TestSuite" Id="{328b2bf2-c951-05ec-1c81-0c69e5069561}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK _REAL_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAddress();
TestClearReference();
TestClone();
TestIecTypeReturnsExpected();
TestIsSigned();
TestMakeReferenceToFollowsReference();
TestMakeReferenceToUpdatesReference();
TestSize();
TestValueReturnsExpectedAfterInit();
TestValueReturnsExpectedAfterChange();
TestSerializeTypeWith();
TestSerializeWith();
TestTryDeserializeFrom();
TestTryMakeReferenceToFollowsReference();
TestTryMakeReferenceToUpdatesReference();
]]></ST>
    </Implementation>
    <Method Name="TestAddress" Id="{610e7c27-8321-0728-2089-a702be071d05}">
      <Declaration><![CDATA[METHOD PUBLIC TestAddress
VAR
    _type : _REAL(0.0);
    notExpected : PVOID := 0;
    actual : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAddress');

actual := _type.Address;

AssertFalse(
    Condition := (notExpected = actual),
    Message := 'Type did not return a valid address.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClearReference" Id="{fed68d47-4e63-0fad-14b3-62b5a8952dbf}">
      <Declaration><![CDATA[METHOD PUBLIC TestClearReference
VAR
    _type : _REAL(0.0);
	target : REAL := 0.0;
    expected : REAL := 0.0;
    actual : REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClearReference');

_type.MakeReferenceTo(target);
_type.ClearReference();
target := 123.4;

actual := _type.Value;

AssertEquals_REAL(
    Expected := expected,
    Actual := actual,
    Delta := REAL#0.001,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClone" Id="{0127e830-3223-0ae5-26cb-b68f8efbc94c}">
      <Declaration><![CDATA[METHOD PUBLIC TestClone
VAR
    _type : _REAL(123.4);
	clone : I_Datatype;
	isValidClone : BOOL;
	compareResult : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClone');

clone := _type.Clone();

isValidClone := clone <> 0;

IF isValidClone THEN
	compareResult := memcmp(_type.Address, clone.Address, clone.Size);
END_IF

AssertTrue(
	Condition := isValidClone,
	Message := 'Clone did not produce a clone'
);

AssertEquals_DINT(
	Expected := 0,
    Actual := compareResult,
    Message := 'Clone did not return a valid clone.'
);

clone.Dispose();

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIecTypeReturnsExpected" Id="{ebaecb80-18bd-0fc1-1124-d7ffd7983c9c}">
      <Declaration><![CDATA[METHOD PUBLIC TestIecTypeReturnsExpected
VAR
    _type : _REAL(0.0);
    expected : STRING := 'REAL';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIecTypeReturnsExpected');

actual := _type.Name;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsSigned" Id="{6fed8012-e50c-03b8-18f2-dbcc28fe1cd9}">
      <Declaration><![CDATA[METHOD PUBLIC TestIsSigned
VAR
    _type : _REAL(0);
    expected : STRING := 'BOOL';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsSigned');

AssertTrue(
	Condition := _type.IsSigned,
    Message := 'Type did not correctly identify itself as being signed'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToFollowsReference" Id="{bcae6ed8-52cc-06aa-22c8-019b3516c8f2}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToFollowsReference
VAR
    _type : _REAL(0.0);
	target : REAL := 0.0;
    expected : REAL := 123.4;
    actual : REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToFollowsReference');

_type.MakeReferenceTo(target);
target := 123.4;

actual := _type.Value;

AssertEquals_REAL(
    Expected := expected,
    Actual := actual,
    Delta := REAL#0.001,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToUpdatesReference" Id="{0db9ce7e-4897-0740-021e-8239fda97f46}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToUpdatesReference
VAR
    _type : _REAL(0.0);
	target : REAL := 0.0;
    expected : REAL := 123.4;
    actual : REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToUpdatesReference');

_type.MakeReferenceTo(target);
_type.Value := 123.4;

actual := target;

AssertEquals_REAL(
    Expected := expected,
    Actual := actual,
    Delta := REAL#0.001,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeTypeWith" Id="{81939243-ea80-0f98-0994-39b59a5227ca}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeTypeWith
VAR
    _type : _REAL(0.0);
    serializer : JsonSerializer;
    expected : STRING(500) := '{"name":"REAL"}';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeTypeWith');

serializer.Reset();
_type.SerializeTypeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeWith" Id="{fb9dd60e-0eca-072f-2475-b45cd2c0179f}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeWith
VAR
    _type : _REAL(123.4);
    serializer : JsonSerializer;
    expected : STRING := '123.40000152'; // Expected value due to the nature of floating point values defined by IEEE754.
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeWith');

serializer.Reset();
_type.SerializeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type data did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSize" Id="{de3ed70c-eb06-03c8-236c-c16748e525fd}">
      <Declaration><![CDATA[METHOD PUBLIC TestSize
VAR
    _type : _REAL(0.0);
    expected : UDINT := SIZEOF(REAL);
    actual : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSize');

actual := _type.Size;

AssertEquals_UDINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct size.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryDeserializeFrom" Id="{01f4f376-c22f-0ce1-19b5-32495cdc9da3}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryDeserializeFrom
VAR
    deserializer : JsonDeserializer;
    feedback : DeserializerFeedback;
    json : STRING := '123.4';
    _type : _REAL(0.0);
    expected : REAL := 123.4;
    actual : REAL;
 END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryDeserializeFrom');

deserializer.Reset();
deserializer.TryLoad(json);
_type.TryDeserializeFrom(Deserializer, Feedback);

actual := _type.Value;

AssertEquals_REAL(
    Expected := expected,
    Actual := actual,
    Delta := REAL#0.001,
    Message := 'Type did not deserialize correctly.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToFollowsReference" Id="{cfe36170-9938-0837-2a87-419a18b32ca3}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToFollowsReference
VAR
    _type : _REAL(0.0);
	target : _REAL(0.0);
    expected : REAL := 123.4;
    actual : REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToFollowsReference');

_type.TryMakeReferenceTo(target);
target.Value := 123.4;

actual := _type.Value;

AssertEquals_REAL(
    Expected := expected,
    Actual := actual,
    Delta := REAL#0.001,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToUpdatesReference" Id="{a7f19ee6-9b7c-0f36-0d04-dffc930b79aa}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToUpdatesReference
VAR
    _type : _REAL(0.0);
	target : _REAL(0.0);
    expected : REAL := 123.4;
    actual : REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToUpdatesReference');

_type.TryMakeReferenceTo(target);
_type.Value := 123.4;

actual := target.Value;

AssertEquals_REAL(
    Expected := expected,
    Actual := actual,
    Delta := REAL#0.001,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterChange" Id="{273c7472-1b95-0705-1f9a-7806c7819252}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterChange
VAR
    _type : _REAL(0.0);
    expected : REAL := 123.4;
    actual : REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterChange');

_type.Value := 123.4;

actual := _type.Value;

AssertEquals_REAL(
    Expected := expected,
    Actual := actual,
    Delta := REAL#0.001,
    Message := 'Expected value not returned after change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterInit" Id="{46c01183-485e-0cb8-232a-7a0fb5c21738}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterInit
VAR
    _type : _REAL(123.4);
    expected : REAL := 123.4;
    actual : REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterInit');

actual := _type.Value;

AssertEquals_REAL(
    Expected := expected,
    Actual := actual,
    Delta := REAL#0.001,
    Message := 'Expected value not returned after Init.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>