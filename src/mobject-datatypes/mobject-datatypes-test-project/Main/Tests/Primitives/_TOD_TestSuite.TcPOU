<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="_TOD_TestSuite" Id="{24a4035a-8b6a-01a7-0d6d-703327f09457}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK _TOD_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAddress();
TestClearReference();
TestClone();
TestIecTypeReturnsExpected();
TestMakeReferenceToFollowsReference();
TestMakeReferenceToUpdatesReference();
TestSize();
TestValueReturnsExpectedAfterInit();
TestValueReturnsExpectedAfterChange();
TestSerializeTypeWith();
TestSerializeWith();
TestTryDeserializeFrom();
TestTryMakeReferenceToFollowsReference();
TestTryMakeReferenceToUpdatesReference();
]]></ST>
    </Implementation>
    <Method Name="TestAddress" Id="{74e38a62-d55b-0e9a-0c2f-c4f664bf1d9d}">
      <Declaration><![CDATA[METHOD PUBLIC TestAddress
VAR
    _type : _TOD(TOD#0:0:0);
    notExpected : PVOID := 0;
    actual : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAddress');

actual := _type.Address;

AssertFalse(
    Condition := (notExpected = actual),
    Message := 'Type did not return a valid address.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClearReference" Id="{2072720f-d814-043d-2e9e-ed2e5e8af9a5}">
      <Declaration><![CDATA[METHOD PUBLIC TestClearReference
VAR
    _type : _TOD(TOD#0:0:0);
	target : TOD := TOD#0:0:0;
    expected : TOD := TOD#0:0:0;
    actual : TOD;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClearReference');

_type.MakeReferenceTo(target);
_type.ClearReference();
target := TOD#12:34:56.789;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClone" Id="{d0f3e9d6-e2be-00f5-1053-ca55f17de2cf}">
      <Declaration><![CDATA[METHOD PUBLIC TestClone
VAR
    _type : _TIME_OF_DAY(TIME_OF_DAY#12:34:56.789);
	clone : I_Datatype;
	isValidClone : BOOL;
	compareResult : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClone');

clone := _type.Clone();

isValidClone := clone <> 0;

IF isValidClone THEN
	compareResult := memcmp(_type.Address, clone.Address, clone.Size);
END_IF

AssertTrue(
	Condition := isValidClone,
	Message := 'Clone did not produce a clone'
);

AssertEquals_DINT(
	Expected := 0,
    Actual := compareResult,
    Message := 'Clone did not return a valid clone.'
);

clone.Dispose();

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIecTypeReturnsExpected" Id="{c0608f1a-0df8-09f4-03cd-8238be2cd1b8}">
      <Declaration><![CDATA[METHOD PUBLIC TestIecTypeReturnsExpected
VAR
    _type : _TOD(TOD#0:0:0);
    expected : STRING := 'TOD';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIecTypeReturnsExpected');

actual := _type.TypeName;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToFollowsReference" Id="{ba94f02c-136b-0d5c-1d7d-edd2b18b3d11}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToFollowsReference
VAR
    _type : _TOD(TOD#0:0:0);
	target : TOD := TOD#0:0:0;
    expected : TOD := TOD#12:34:56.789;
    actual : TOD;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToFollowsReference');

_type.MakeReferenceTo(target);
target := TOD#12:34:56.789;

actual := _type.Value;

AssertEquals_TIME_OF_DAY(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToUpdatesReference" Id="{47728bc5-769f-0196-1257-cbf1991c1566}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToUpdatesReference
VAR
    _type : _TOD(TOD#0:0:0);
	target : TOD := TOD#0:0:0;
    expected : TOD := TOD#12:34:56.789;
    actual : TOD;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToUpdatesReference');

_type.MakeReferenceTo(target);
_type.Value := TOD#12:34:56.789;

actual := target;

AssertEquals_TIME_OF_DAY(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeTypeWith" Id="{d2b44eca-19ea-0aab-2933-458ecd790526}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeTypeWith
VAR
    _type : _TOD(TOD#0:0:0);
    serializer : JsonSerializer;
    expected : STRING := '{"name":"TOD"}';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeTypeWith');

serializer.Reset();
_type.SerializeTypeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeWith" Id="{5850d25c-c703-0f54-3a16-3402a9fed883}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeWith
VAR
    _type : _TOD(TOD#12:34:56.789);
    serializer : JsonSerializer;
    expected : STRING := '"TOD#12:34:56.789"';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeWith');

serializer.Reset();
_type.SerializeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type data did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSize" Id="{28383b65-3965-073f-06eb-2cc5554cb73b}">
      <Declaration><![CDATA[METHOD PUBLIC TestSize
VAR
    _type : _TOD(TOD#0:0:0);
    expected : UDINT := SIZEOF(TOD);
    actual : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSize');

actual := _type.Size;

AssertEquals_UDINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct size.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryDeserializeFrom" Id="{96592257-d8f1-0bd9-3c73-574931a9c407}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryDeserializeFrom
VAR
    deserializer : JsonDeserializer;
    feedback : DeserializerFeedback;
    json : STRING := '"TOD#12:34:56.789"';
    _type : _TOD(TOD#0:0:0);
    expected : TOD := TOD#12:34:56.789;
    actual : TOD;
 END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryDeserializeFrom');

deserializer.Reset();
deserializer.TryLoad(json);
_type.TryDeserializeFrom(Deserializer, Feedback);

actual := _type.Value;

AssertEquals_TIME_OF_DAY(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not deserialize correctly.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToFollowsReference" Id="{ac9a24a8-28d8-04e4-1856-9607a97d0ee5}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToFollowsReference
VAR
    _type : _TOD(TOD#0:0:0);
	target : _TOD(TOD#0:0:0);
    expected : TOD := TOD#12:34:56.789;
    actual : TOD;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToFollowsReference');

_type.TryMakeReferenceTo(target);
target.Value := TOD#12:34:56.789;

actual := _type.Value;

AssertEquals_TIME_OF_DAY(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToUpdatesReference" Id="{3b86ef8f-adb5-0f9b-0c01-6053b2a36484}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToUpdatesReference
VAR
    _type : _TOD(TOD#0:0:0);
	target : _TOD(TOD#0:0:0);
    expected : TOD := TOD#12:34:56.789;
    actual : TOD;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToUpdatesReference');

_type.TryMakeReferenceTo(target);
_type.Value := TOD#12:34:56.789;

actual := target.Value;

AssertEquals_TIME_OF_DAY(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterChange" Id="{03ce31e4-bb69-0229-338c-c2a373fb5d4e}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterChange
VAR
    _type : _TOD(TOD#0:0:0);
    expected : TOD := TOD#12:34:56.789;
    actual : TOD;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterChange');

_type.Value := TOD#12:34:56.789;

actual := _type.Value;

AssertEquals_TIME_OF_DAY(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterInit" Id="{9103d446-bb4b-0e56-0ed6-7578d419e529}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterInit
VAR
    _type : _TOD(TOD#12:34:56.789);
    expected : TOD := TOD#12:34:56.789;
    actual : TOD;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterInit');

actual := _type.Value;

AssertEquals_TIME_OF_DAY(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after Init.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>