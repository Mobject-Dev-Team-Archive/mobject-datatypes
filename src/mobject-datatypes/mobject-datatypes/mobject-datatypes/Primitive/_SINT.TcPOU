<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="_SINT" Id="{baa9b623-38b4-4986-b596-0141fbde1188}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK _SINT EXTENDS NumericDatatypeBase
VAR
	localData : SINT;
	activeData : REFERENCE TO SINT REF= localData;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{ca89985d-f8c7-40b2-a1d5-e0d5851c326e}" />
    <Folder Name="Protected" Id="{e1688de6-9cb9-4e39-874d-681a2ea0cdf2}" />
    <Property Name="Address" Id="{e5591d7a-20a4-47b5-9b6a-cd3d6df4a536}">
      <Declaration><![CDATA[PROPERTY PUBLIC Address : PVOID]]></Declaration>
      <Get Name="Get" Id="{3e338be3-098a-499b-99e4-7d5654b4df55}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Address := ADR(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ClearReference" Id="{75f32e98-47a8-4b25-b8ce-365065b3dd76}">
      <Declaration><![CDATA[METHOD PUBLIC ClearReference
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= localData;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clone" Id="{d8cdc587-602c-4f46-aae6-733fe2135ead}">
      <Declaration><![CDATA[METHOD PUBLIC Clone : I_Datatype
VAR
    pClone : POINTER TO _SINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[pClone := __NEW(_SINT(InitialValue := Value));
Clone := pClone^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{4f2eaad4-b352-4e27-a9f9-ca3e9cf75256}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	InitialValue : SINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[localData := InitialValue;]]></ST>
      </Implementation>
    </Method>
    <Property Name="IsFloat" Id="{8de4cb73-0e9a-4aa4-8ec8-40c4688ae390}">
      <Declaration><![CDATA[PROPERTY PUBLIC IsFloat : BOOL]]></Declaration>
      <Get Name="Get" Id="{7a810fa6-bc0a-4893-8914-1be8ec9e8498}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsFloat := FALSE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="IsSigned" Id="{dafa3d29-c8e7-40b7-a122-2cdeaa862b48}">
      <Declaration><![CDATA[PROPERTY PUBLIC IsSigned : BOOL]]></Declaration>
      <Get Name="Get" Id="{e116f197-2b4d-4f57-aad1-644d3835c8df}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsSigned := TRUE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="MakeReferenceTo" Id="{a920b83e-637d-46e7-85b7-92b694f42757}">
      <Declaration><![CDATA[METHOD PUBLIC MakeReferenceTo
VAR_INPUT
	ReferenceTarget : REFERENCE TO SINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= ReferenceTarget;]]></ST>
      </Implementation>
    </Method>
    <Property Name="MaxValue" Id="{be11f9d7-6c2b-4c49-bf0e-7c9accea8d8a}">
      <Declaration><![CDATA[PROPERTY PUBLIC MaxValue : SINT]]></Declaration>
      <Get Name="Get" Id="{fa5f5f1b-f2c8-4088-b33c-588aa85a067a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MaxValue :=  DatatypeLimits.SINT_MAX_VALUE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="MinValue" Id="{cd63a22a-47f3-4138-98f7-342494154acf}">
      <Declaration><![CDATA[PROPERTY PUBLIC MinValue : SINT]]></Declaration>
      <Get Name="Get" Id="{82966c25-6ebf-439f-ae8b-7f2f1aab64a7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MinValue := DatatypeLimits.SINT_MIN_VALUE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="SerializeMaxValue" Id="{667af442-38a6-463f-82ae-0ef3929094c3}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED SerializeMaxValue
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Serializer.AddSint(MaxValue);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeMinValue" Id="{858ea518-cf2a-416b-a1cf-b4ed46a6198f}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED SerializeMinValue
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Serializer.AddSint(MinValue);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeWith" Id="{c03e7885-a45b-454a-b086-a264e38aba89}">
      <Declaration><![CDATA[METHOD PUBLIC SerializeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Serializer.AddSint(activeData);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{7e65ccc3-fb06-441d-9dbe-d0120a34c432}">
      <Declaration><![CDATA[PROPERTY PUBLIC Size : UDINT]]></Declaration>
      <Get Name="Get" Id="{1065f0ec-754b-492b-9e7e-7df73c1b3900}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := SIZEOF(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="TryDeserializeFrom" Id="{f4559769-7aee-4116-8595-a5c4be5f1abf}">
      <Declaration><![CDATA[METHOD TryDeserializeFrom : BOOL
VAR_INPUT
	Deserializer : I_Deserializer;
	Feedback : I_DeserializerFeedback;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryDeserializeFrom := Deserializer.TryGetSint(activeData, Feedback);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryMakeReferenceTo" Id="{6b72bdcb-b9c0-4ff0-a0a2-e2658d3c6d80}">
      <Declaration><![CDATA[METHOD TryMakeReferenceTo : BOOL
VAR_INPUT
	Target : I_Datatype;
END_VAR
VAR
	pTargetData : POINTER TO SINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT (Target.TypeName = TypeName) THEN
	RETURN;
END_IF

pTargetData := Target.Address;
activeData REF= pTargetData^;
TryMakeReferenceTo := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="TypeName" Id="{660c5a4e-0377-4c67-b8ff-c621785afcaa}">
      <Declaration><![CDATA[PROPERTY PUBLIC TypeName : T_MAXSTRING]]></Declaration>
      <Get Name="Get" Id="{02178733-005a-4eff-a41e-e00687adebb2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TypeName := 'SINT';]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Value" Id="{12f26868-cd97-476b-9f8a-949fc5908bbf}">
      <Declaration><![CDATA[PROPERTY PUBLIC Value : SINT]]></Declaration>
      <Get Name="Get" Id="{2aa5fc95-a94b-4cd0-b411-6160dabbae69}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Value := activeData;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{f9da1bdc-2353-416a-a93e-3ca78a60f79a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[activeData := Value;]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>